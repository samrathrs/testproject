<?xml version="1.0" encoding="ISO-8859-1" ?>
<project name="ara" basedir="." default="init">
	<property file="./src/installer/build.properties" />
	<property environment="env" />

	<!-- Define a macro for maven tasks
	Ref: http://maven.apache.org/ant-tasks/examples/mvn.html -->
	<property name="maven.home" value="${env.MAVEN_HOME}" />
	<macrodef name="maven">
		<attribute name="options" default="" />
		<attribute name="goal" />
		<attribute name="basedir" />
		<attribute name="resultproperty" default="maven.result" />
		<element name="args" implicit="true" optional="true" />
		<sequential>
			<java classname="org.codehaus.classworlds.Launcher" fork="true" dir="@{basedir}" resultproperty="@{resultproperty}">
				<jvmarg value="-Xmx512m" />
				<classpath>
					<fileset dir="${maven.home}/boot">
						<include name="*.jar" />
					</fileset>
					<fileset dir="${maven.home}/lib">
						<include name="*.jar" />
					</fileset>
				</classpath>
				<sysproperty key="classworlds.conf" value="${maven.home}/bin/m2.conf" />
				<sysproperty key="maven.home" value="${maven.home}" />
				<sysproperty key="maven.multiModuleProjectDirectory" value="${maven.home}" />
				<arg line="--batch-mode @{options} @{goal}" />
			</java>
		</sequential>
	</macrodef>

	<target name="init">
		<tstamp>
			<format property="run.time" pattern="MM/dd/yyyy hh:mm aa" />
		</tstamp>
		<exec executable="hostname" outputproperty="host.name" />
		<echo message="Initializing ara build...${run.time}" />
	</target>

	<target name="updateManifest" depends="init">
		<buildnumber file="./src/main/resources/installer/build.number" />
		<loadproperties srcFile="./src/main/resources/installer/build.number" />

		<property name="version.string" value="${build.version}.${env.BUILD_NUMBER}" />
		<echo message="Build Version : ${version.string}" />

		<tstamp>
			<format property="current.timestamp" locale="US" pattern="MM-dd-yyyy hh:mm:ss" />
		</tstamp>

	</target>

	<target name="ara" depends="init">
		<maven basedir="${basedir}" options="-DskipTests=true" goal="clean" resultproperty="maven.build.result" />
		<maven basedir="${basedir}" options="-DskipTests=true" goal="package" resultproperty="maven.build.result" />
	</target>

	<target name="installer" depends="ara,updateManifest" description="Builds the installer package">
		<property name="package.dir" value="./target/packages" />
		<delete dir="${package.dir}" />

		<echo message="Current Version is ${version.string}" />
		<property name="current.pkg.dir" value="${package.dir}/alexiares/${version.string}" />
		<mkdir dir="${current.pkg.dir}" />

		<delete dir="${install.dir}" />
		<!-- Copy the files -->
		<copy tofile="${current.pkg.dir}/ara.jar" file="${basedir}/target/ara-0.0.1-SNAPSHOT.jar">
		</copy>
		<copy todir="${current.pkg.dir}" flatten="true" includeemptydirs="false">
			<!-- Installer scripts -->
			<fileset dir="${basedir}/src/main/resources/installer/scripts">
				<include name="*.xml" />
			</fileset>
			<!-- Copy the template files -->
			<fileset dir="${basedir}/src/main/resources/installer/templates" includes="ara.json">
			</fileset>
		</copy>
		<antcall target="tagCvs">
		</antcall>
	</target>

	<!-- target called by a parent build script that passes the
	 build.path for updatemanifest to work -->
	<target name="parentinstaller" description="parentinstaller">
		<echo message="In parent installer build.path from parent is ${build.path}" />

		<antcall target="installer">
			<param name="default.build.path" value="${build.path}" />
		</antcall>
	</target>

	<target name="tagCvs" description="Tag the CVS modules" unless="skipTag" if="xera.checkout.tag">
		<property name="cvs.tmp.file" value=".cvs.version" />
		<tstamp />
		<echo message="ara_${DSTAMP}_v_${build.version}_${build.number}" file="${cvs.tmp.file}" />
		<loadfile property="cvs.version.tag" srcFile="${cvs.tmp.file}">
			<filterchain>
				<tokenfilter>
					<replaceregex pattern="\." replace="_" flags="g" />
				</tokenfilter>
			</filterchain>
		</loadfile>
		<delete file="${cvs.tmp.file}" />

		<echo message="Tagging modules with ${cvs.version.tag}" />
		<!-- Checkin the build number file -->
		<cvs cvsRoot="${env.CVSROOT}" command="commit -m 'Build ${build.version}.${build.number} tagged ${cvs.version.tag}' ./src/main/resources/installer/build.number" />

		<!-- Tag the modules -->
		<!-- Tag the branch if the build is off of a branch -->
		<condition property="ara.branch" value="" else="-r ${xera.checkout.tag}">
			<equals arg1="${xera.checkout.tag}" arg2="" />
		</condition>
		<echo message="Tagging ara with ${cvs.version.tag}. Branch used in rtag command: '${ara.branch}'" />
		<cvs cvsRoot="${env.CVSROOT}" command="rtag ${ara.branch} ${cvs.version.tag} ara" />

	</target>

</project>
